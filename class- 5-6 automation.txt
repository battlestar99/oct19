1. review functions/methods 
2. configure selenium
3. how to find web elements 
4. start using selenium commands 

runnable class - main method of java 

non-runnable class - no main method of java 
OOP - 
storage of functions - properties 

input - system - output 

input/no input - function - output 1/no output  

package
class
public int findelement (int x, String name) {

int num=17;

return num;

}



// interest rate 

// you will get credit score, you need to write a function to find interest rate 

public double findinterestRate(int creditscore){

double interestrate; 

if(creditscore==700){
interestrate=1.5;
}
if(creditscore==750){
interestrate=1;
}
if(creditscore==650){
interestrate=2;
}

return interestRate; 

}

x=6
x==6

25000 x interestrate 
we always create functions in non-runnable class
and call them from runnable class 

class will start 12: 25 PM 








Selenium configuration : 

1. you need to two libraries - jar files 

2. you need a browser driver - google chrome

selenium - tool 

programming library - java - jar files

browser - url for the application 
www.facebook.com

setting up selenium - automation testing library, browser automation 

runnable class - test scripts 
non-runnable class - page object model 

1. java setup - jdk + eclipse 
2. need the selenium libraries - java selenium , selenium standalone server 
jar files 2.53 
3.80 

 

google chrome browser - where our test is going to run - where we test the applicaion

chromedriver - is required to run a browser from our test script 





web elements or web objects - are the components in any webpage that an user
can interact with 

text box
button 
link
drop down 
radio button
checkbox
windows
iframe
table 

HTML - CSS 

attributes  - value of attributes 

name, address,age 
name = bob
name = michael 

first name text box 

<input type="text" class="inputtext _58mg _5dba _2ph-" data-type="text" 
name="firstname" value="" aria-required="true" 
placeholder="" aria-label="First name" id="u_0_f" aria-describedby="js_3zq">

last name text box

<input type="text" class="inputtext _58mg _5dba _2ph-" data-type="text" 
name="lastname" value="" aria-required="true" 
placeholder="" aria-label="Last name" id="u_0_h" aria-describedby="js_3do">


id
name

xpath
css selector










Class - 6 

java - class 
.java - .class binary file 

class {
main method(){}


}
 
run - test scripts 
not run - libraries - functions are already created and we are using the funtions
page object model - object driven framework 

1. java setup - jdk + eclipse IDE 
2. selenium - 2 jar files - selenium java, selenium server standalone 
choosing the driver we want to use - chromedriver, geckodriver, IEdriver
3. need the browser you want to run test - google chrome 
What are requirments of the module: 

req 1 : 

sign up module should have text box 
for firstnrame, last name, mobile, password
and drop down for selecting birthday, 
gender selection radio button, should have
a link for agreement, and hava sign up
button 

req 2: 

sign up button should have written 
"Sign Up" in the button 

req 3: sign up page should have title 
"facebook login or signup "

req 4: 

sign up page should be located in www.facebok.com
domain 

req 5: 
the year in the dropdown should 1905 to 
current year 

req 6 : 

mobile number should have 10 digits 

req 7 : 

password must have one capital case, 
one special character 

req 8 : 

if any user fill up the form and internet get 
disconnected after clicking sign, it should 
not enter any data to database 
developer - 

tester - 



Test Case - manual test case 
10 test case 
500 test case - 20000 test case 
Test script - automation test script 

why automated test scripts 
1. regression testing 
2. data driven  testing - 100 
3. cross browser - environment 














info

user>foldername>foldername

C:\\Users\\Agile1Tech

user\\agile1tech\\automationTesting\\chromedriver

Class will start 12:20 PM 

finding web elements 

attributes and value 

first name text box 
locator 
attributes and value of attributes 

<input type="text" class="inputtext _58mg _5dba _2ph-" data-type="text" 
name="lastname" value="" aria-required="true" 
placeholder="" aria-label="Last name" id="u_0_h">

input is a tag - 

sign up button 

<button type="submit" class="_6j mvm _6wk _6wl _58mi _3ma _6o _6v" 
name="websubmit" id="u_0_w">Sign Up</button>

8 locating tecniques - 

These 4 can be used for any web elements 
id
name
xpath
css selector 

these 4 have sepecial condition
linktext - link / hyperlink that starts with an anchor tag "a" tag
partial linktext - link / hyperlink that starts with an anchor tag "a" tag

these 2 are for finding group of web elemtns - finelements 
tagname
class name


Lunch Break 
Class will start at 2:10 PM 
implicit wait - all the weblements of the page is loaded, before we move 
forward to find any web elements 

thread.sleep - stop the code for certain amount of time 

explicit wait - 




Good Morning
Class Will start 11:15 AM

Questions - 

1. returns and print 
system.out.println(dfhl)
return - 1 output
2. jar files - 
100 functions - non runnable - jar files - carcontrol library - java zipped file 
500 functions - non runnable - jar files - selenium library 

java documentations - 



3. weblement 
data type is similar to a non-runnable class

data type created in selenium libraries 
int, String, boolean, double, char, float 
4. setup - selenium 

2 jar files - server standlone-selenium java 
add it to the build path 
browser driver - chrome driver 

system.setproperty("webdrver.ie.driver","c://iddriver.exe")

webdriver driver = new internetexploereredriver();

5. selenium 



Application Layers- 

2 layers 
3 layers 

Functional Testing Scenerios - 

brief : 

1. java setup - jdk+eclipse 

2. java basics - class, variables, datatype, if/else, for loop 

3. java basics - functions - runnable class, non runnable 
how to create and how to use functions 

4. selenium library - how to setup librarys - jar files 
browser driver - chrome driver 

5. selenium functions - interacting with the browser 
Functional testing - BRD 
FRD 
Testing the functionlities of the application 

Requirments - 

Testing - pass/fail 
expected result - actual result 
matches - pass
fail 

Wednesday - 7PM - 830 PM 

Class will start 12:35 PM 


How To find web elments or web objects 

web elements - attributes - value of the attributes 

id = value of the id

locating tecniques 
primary attributes 
id
name 


<input type="text" class="inputtext _55r1 _6luy" name="email" 
placeholder="Email or Phone Number" aria-label="Email or Phone Number",
count='1'>

text box - input
drop down- select 
button - button
link - a 

syntax 
xpath 
using the attributes of the web elements 
relative xpath
//tagname[@attribute='value']
//*[@attribute='value']

//input[@count='1']
//input[@name='email']

css selector 
tagname[attribute="value"]
[attribute='value']


//*[@id="u_0_a"]/div[1]/div[1]/input

absolute xpath - depending on the location of the web elements, that can be 
changes due to design changes

/html/body/div[1]/div[2]/div[1]/div/div/div/div[2]/div/div[1]/form/div[1]/div[1]/input

locating tecniques - links - a 
linktext 
partial link text 

Finding multiple web elements 
tagname
clssname

driver.findlements(By.tagname("input"))

Finding the weblements in our test scripts 

weblement only works withthin the test scripts 
we need to find webelements again and again as long as we need to use 
it in different test scripts 
5 different test scripts - same sign up button 
1. its not efficient - 5 times 
2. locating tecniques change - we need fix it in 5 different places 

5 web elements - 20 different test scripts 
20 test scripts are going to fail


object driven framework - 
seperating web objects from our test scripts 
page object model - non runnable class - create functions to find web elements  
page factory 

java - oop 
constructor - is a tecniques in oop to setup initial value for some variable 
get executed when you create an object 
functions - properties 

























































































responsibilities 


1. validate the requirements - manulay/automated test scripts 
2. test case - test scripts,automation test case 
3. test plan, test strategy, traciblity matrix 
4. smoke - sanity - regression- uat - release 
5. agile/scrum - sprints - sprint 1 ............sprint 6 
3 months release - 2 weesk sprint 

relases - 

1. new module - enhancement
2. modification 
3. bug fix


 























