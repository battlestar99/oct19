Class will start 11:15 

enabled - true or false
click - will click to the button 

1. there should be a signup button with the text "Sign up" and user should be 
able to click to the button 

test case 

read what is written in the button
and also check if the button is enabled 

page object model - object driven framework 

webelment getfirstname(){


}

one class for one web page 
page{

getmonthdd();
webelement x = driver.findelement();


}
select ddmonth= new select(webelement);

TestNG 

main method of java - so we can run the test script
page object model - to seperate test scripts from webelements 

1. we can organize more specifically which is the part of test or not
2. expected and actual results - we need a testing framework 
3. Test results - HTML 
4. data driven testing
5. mutiple test in one test scripts

junit - TestNG 

1. library - jar file
2. eclipse plugin for TestNG 

Cucumber 
1. library - jar files
2. eclipse plugin for Cucumber










real project structure 

package 1 - all test scripts 
package 2 - all page object model classes
package 3 - utility classes 

http://dl.bintray.com/testng-team/testng-eclipse-release/

TestNG plugin for eclipse

Annotations - come with one function - has its own sequence 

1 Test Sctipts - 


@BeforeTest - prerequisite of the tests 
@Beforemethod 
@Test1 - execute one test
@Aftermethod
@Beforemethod 
@Test2 - execute another test
@Aftermethod
@AfterTest - after the test execution 



beforeSuite
beforeclass
beforetest
beforemethod - whatever you need to do before each test
test





Test - you test based on requirments

you can tell something is a bug if a test fails 

pass/fails 

comparing expected vs actual 





class testscripts 
- validate all home page links 

10 tests - 

100 test scripts - 100 java classes 
230 tests - @test annotations 

230 test cases 
100 test scripts - 230 test cases 

1. annotations - sequence
2. test - alphabetically, priority, enable
3. assertions - 
4. creating test suite - testng xml 
5. creating parameterized testing - xml 

hard assertions - 
expected vs actual 


package for test scripts 
package for page object model 
package for utility classes 

use framework - TestNG Cucumber 

framework create
object driven - seperating web elements from test scripts
data driven - seperating test data from test scripts 
hybrid famework
keyword driven - seperating non-test data from test scripts 





TestNG / Cucumber 

1. organization of our code 
2. assertions 
3. creating a report 
4. creating test suites - run multiple test cases 
5. data driven testing - parameterized testing concept 
6. parellel testing
7. cross browser testing 

Test Scnerio : 

1. validating all the insurance options are available in the home page 
2. validate the url and title of the home page 
3. validate all the header options are displayed, enabled and clickable 
4. validate if the right phone number is in the home page 
5. validate we can navigate to a new quote from home page 
6. validate we can fill up the get a quote page form 


If assertion fails - that is only test failure 

any other error or exception is code failure - 

close the ticket 
open - bug 
in progress - 
this bug is fixed 
retest

Automation Testing - Things to know

1. Technical - how you are finding your webelements, 
how you are interacting with the browser 

2. how to organize your code and collaborate in a team as a programmer 

Test Suite - collection of tests/test cases 

XML - Test Suite

version 12 > version 13 - 3 months - 
1. enhancement - html+css , bootstrap
2. modification 
3. bug fix 

minimum crierion 



release planning - sprint 1 

next 3 months - december 29th - PI planning, release planning 
300 test cases 
backlogs - 
6 sprints 
sprint 1 - smoke testing - 30 new test cases
sprint 2 - smoke testing , - 30 
sprint 3 - regression  - 330 
sprint 4 - regression 
sprint 5 - regression
sprint 6 - UAT - 20 

relase planning meething 13 > 14 
 
50 
330+50 = 380 test cases 



Good Morning 

Class will start 11:10 AM 


Topics To Discuss - 
Testing Framework - data, object, keyword, hybrid
TestNG - parameterization 
Java - Object oriented Programming 

Assertions - why and how 
Test script - multiple test case - 100 - 200 test cases 
Test case - manual test cases 

Test Scnerio - Validating the application login for positive credentials - req 145 
Test case - id, env, steps, pass/fail 

Test - compare 
actual values - after the test is executed 
expected values - from the requirements - know expected values before the test
compare actual vs expected - test pass / test fail 

verification - smoke testing
validate - 

Assertequals (expected value, actual value) 


- validate that an element should not be enabled 

isenabled - false 

assertfalse(false)



Testing framework - 

1. object driven framework - seperating web objects from test scripts 
2. data driven framework - test data from test scripts 
excel file - is generally used for big sets of data - 100 sets 5000 sets 
parameterized testing - using testng for testing with 2-10 sets of data 
cucumber data table - 2 - 500 sets of data 

3. keyword - non test data - test scripts - 

4. hybrid framework - object + data driven 

framework 
create - 
use - TestNG, cucumber 

Parameterized testing - 

@parameter 

TestNG - 

1. annotations - sequences - priority - alphabatical order 
beforetest, test, aftertest - beforemethod, aftermethod 

2. assertions - why and how 

3. enabled, dependonsonmethods 

4. test results - html file - emailablereport.html 

5. test suites - TestNG XML  - class test scripts, test ( methods) 

6. parallel testing - 

7. cross browser testing - 

8. parameterized - data driven testing - passing data from the xml files 


assertequals(boolean, boolean)

assertrue(true)

assertfalse(false)


 








 


































































































